# -*- coding: utf-8 -*-
"""calculate_J.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1guleywn1aqEELSa4-a9G-UEombiRmmQd
"""

from common.constants import STEFAN_BOLTZMANN_CONST as sb_cons
import math
import numpy as np

#data.abt_sw_profile 읽어 와서 리스트로 추가
abt_sw_profile = open("../../data/a_sw_profile.txt",'r')
abt_sw_prof = abt_sw_profile.readlines()
for line in lines:
    line = line.strip()  # 줄 끝의 줄 바꿈 문자를 제거한다.
abt_sw_profile.close()

#data.abt_lw_profile 읽어 와서 리스트로 추가
abt_lw_profile=open("../../data/a_lw_profile.txt",'r')
abt_lw_prof = abt_sw_profile.readlines()
for line in lines:
    line = line.strip()  # 줄 끝의 줄 바꿈 문자를 제거한다.
abt_sw_profile.close()


class J_calc:
    def __init__(self,del_x,del_y,abt_sw_profile,abt_lw_profile,t_profile):
        self.a_sw=abt_sw_profile    #시간에 대해 일정한 sw absorptivity profile
        self.a_lw=abt_lw_profile    #시간에 대해 일정한 lw absorptivity profile
        self.t_pf=t_profile         #표면+각 층의 시간에 따라 변하는 T profile
        self.del_s=del_x*del_y      #column의 단면적
        self.nz=3                   #layer의 개수
        self.A_sfc=0.3              #지표면 sw albedo
        self.sun_cons=1360          #태양상수

    #단파장 투과도 계산 함수
    def t_calc_sw(self,z_bot,z_top):
        result=1
        #optical depth 계산부분
        for i in range(z_bot,z_top+1):
            result*=1-self.a_sw[i]
        return result

    #장파장 투과도 계산 함수
    def t_calc_lw(self,z_bot,z_top):
        result=1
        #optical depth 계산부분
        for i in range(z_bot,z_top+1):
            result*=1-self.a_lw[i]
        return result
    
    #특정 layer의 sortwave net flux 계산 함수
    def J_sw(self,layer_num):
        return self.sun_cons*self.del_s*((t_calc_sw(layer_num,nz)-t_calc_sw(layer_num-1,nz))
            +(t_calc_sw(0,nz))*self.A_sfc*(t_calc_sw(0,layer_num-1)-t_calc_sw(0,layer_num)))

    #특정 layer의 longwave downward flux 계산 함수 (위에서 아래로 들어오는)
    def F_lw_downward(self,layer_num):
        j=layer_num
        result=0
        for k in range(j+1,nz+1):
            result+=self.a_lw[k-1]*self.sb_cons*(self.t_pf[k]**4)*self.del_s*t_calc_lw(j,k-1)
        return result

    #특정 layer의 longwave upward flux 계산 함수 (아래에서 위로, 지표 제외)
    def F_lw_upward(self,layer_num):
        j=layer_num
        result=0
        for k in range(1,j):
            result+=self.a_lw[k-1]*self.sb_cons*(self.t_pf[k]**4)*self.del_s*t_calc_lw(k,j-1)
        return result

    #특정 layer의 longwave net flux 계산 함수
    def J_lw(self,layer_num):
        j=layer_num
        abt=self.a_lw[j-1]
        return (abt*(F_lw_downward(j)+F_sw_upward(j)+self.sb_cons*self.del_s*(self.t_pf[0]**4)*t_calc_lw(0,j-1))
            -2*abt*self.sb_cons*(self.t_pf[j]**4)*self.del_s)

    #특정 layer의 net flux 계산 함수
    def J_calc(self,layer_num):
        return J_sw(layer_num)+J_lw(layer_num)

